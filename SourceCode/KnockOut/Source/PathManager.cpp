
#include "PathManager.h"

namespace KnockOut
{

	int myMap1 [15][15] = 

		{
		//  0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 
			0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, //0
			0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, //1
			1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, //2
			1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, //3
			1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, //4
			1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, //5
			1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, //6
			1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, //7
			1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, //8
			1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, //9
			1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, //10
			1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, //11
			1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, //12
			1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, //13
			1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, //14
			

		};

	/*
	
		//  0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 
			0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, //0
			0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, //1
			1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, //2
			1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, //3
			1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, //4
			1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, //5
			1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, //6
			1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, //7
			1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, //8
			1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, //9
			1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, //10
			1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, //11
			1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, //12
			1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, //13
			1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, //14
			
*/

	int myMap2 [15][15] = 

		{
		//  0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 
			0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, //0
			0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, //1
			1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, //2
			1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, //3
			1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, //4
			1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, //5
			1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, //6
			1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, //7
			1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, //8
			1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, //9
			1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, //10
			1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, //11
			1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, //12
			1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, //13
			1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, //14
			

		};

	int myMap3 [15][15] = 

		{
		//  0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 
			0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, //0
			0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, //1
			1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, //2
			1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, //3
			1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, //4
			1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, //5
			1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, //6
			1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, //7
			1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, //8
			1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, //9
			1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, //10
			1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, //11
			1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, //12
			1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, //13
			1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, //14

		};



	PathManager::PathManager()
	{
		enemyFactory = EnemyFactory::getSingletonPtr();
		
		CD_MAX = 2.0f;
		holdGenerate = 0.0f;

		pathExist = false;

		
		


		
		
		
	}


	void PathManager::readMap(int ID)
	{


		//allocate
		int** myMapCopy = new int*[15];
		for(int i = 0;i < 15;i++)
			myMapCopy[i]=new int[14];

		
		for(int i = 0;i < 15;i++)
		{
			for(int j = 0;j < 15;j++)
			{
				if(ID == 1)
					myMapCopy[i][j] = myMap1[i][j];
				else if(ID == 2)
					myMapCopy[i][j] = myMap2[i][j];
				else if (ID == 3)
					myMapCopy[i][j] = myMap3[i][j];
			}
		}
			
				


	
		pathGenerater = new PathGenerater(15, 15);

		
		//read bit map
		for(int i = 0; i < 15; i ++)
			for(int j = 0; j < 15; j ++)
				pathGenerater->readInt(myMapCopy[i][j], i, j);


		//pathGenerater->obstaclePlaced(750, 0, 750);




		pathGenerater->obstaclePlaced(750, 0, 750);
	}

	PathManager::~PathManager()
	{
		
	}

	void PathManager::clearAndCalculatePath(Vector2 vF, Vector2 vT)
	{
		pathGenerater->positionList.clear();
		pathGenerater->getPathMap(vF, vT);
	}


	bool PathManager::reCalculatePath()
	{
		

		


		return true;
	}



	void PathManager::showPath()
	{
		if(pathGenerater->pathNodeCount > 0)
		{
				pathExist = false;
				pathGenerater->freeOldPathNode();
		}
		if(holdGenerate <= 0)
		{
			pathGenerater->getPathMap(Vector2(0,0), Vector2(15,15));
			pathGenerater->pathPlaced(750, 0, 750); 
			holdGenerate = CD_MAX;
		}
		
		pathExist = true;

	}

	void 
	PathManager::Think(float time)
	{
		if(holdGenerate > 0)
			holdGenerate -= time;
		
		// Do any "Global" AI thinking, and then call think for all of the actual AI's running about
		//p->update(time);
	}


}







